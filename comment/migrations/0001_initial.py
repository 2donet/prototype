# Generated by Django 5.1.4 on 2025-07-26 09:35

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('decisions', '0001_initial'),
        ('need', '0001_initial'),
        ('project', '0001_initial'),
        ('user', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CommentReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report_type', models.CharField(choices=[('SPAM', 'Spam or Excessive Self-Promotion'), ('SCAM', 'Scam or Fraudulent Content'), ('THEFT', 'Intellectual Property Theft'), ('HARASSMENT', 'Harassment or Bullying'), ('HATE_SPEECH', 'Hate Speech'), ('MISINFORMATION', 'Misinformation'), ('OTHER', 'Other')], default='OTHER', help_text='Type of violation being reported', max_length=20)),
                ('status', models.CharField(choices=[('PENDING', 'Pending Review'), ('REVIEWED', 'Reviewed'), ('REJECTED', 'Rejected'), ('RESOLVED', 'Resolved')], default='PENDING', help_text='Current status of the report', max_length=20)),
                ('description', models.TextField(blank=True, help_text='Additional context provided by the reporter')),
                ('moderator_notes', models.TextField(blank=True, help_text='Notes from the moderator reviewing the report')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CommentReportGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_reports', models.PositiveIntegerField(default=0)),
                ('report_types_summary', models.JSONField(default=dict)),
                ('first_reported_at', models.DateTimeField()),
                ('last_reported_at', models.DateTimeField()),
                ('status', models.CharField(choices=[('PENDING', 'Pending Review'), ('REVIEWED', 'Reviewed'), ('REJECTED', 'Rejected'), ('RESOLVED', 'Resolved')], default='PENDING', max_length=20)),
            ],
            options={
                'ordering': ['-last_reported_at'],
            },
        ),
        migrations.CreateModel(
            name='CommentVote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vote_type', models.CharField(choices=[('UPVOTE', 'Upvote'), ('DOWNVOTE', 'Downvote')], default='UPVOTE', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Comment Vote',
                'verbose_name_plural': 'Comment Votes',
            },
        ),
        migrations.CreateModel(
            name='ModerationAction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('decision', models.CharField(choices=[('APPROVE', 'Approve Comment (Dismiss Reports)'), ('HIDE', 'Hide Comment'), ('REMOVE', 'Remove Comment'), ('EDIT', 'Edit Comment Content'), ('WARN_USER', 'Warn User'), ('SUSPEND_USER', 'Suspend User'), ('BAN_USER', 'Ban User'), ('FALSE_REPORT', 'Mark as False Report'), ('REMOVE_CONTENT_ONLY', 'Remove Content Only'), ('REMOVE_AUTHOR_ONLY', 'Remove Author Only'), ('REMOVE_AUTHOR_AND_CONTENT', 'Remove Author and Content'), ('DELETE_THREAD', 'Delete Entire Thread')], max_length=25)),
                ('decision_scope', models.CharField(choices=[('ALL_REPORTS', 'Apply to All Reports'), ('REPORT_TYPE', 'Apply to Specific Report Type'), ('SINGLE_REPORT', 'Apply to Single Report Only')], default='ALL_REPORTS', max_length=25)),
                ('target_report_type', models.CharField(blank=True, choices=[('SPAM', 'Spam or Excessive Self-Promotion'), ('SCAM', 'Scam or Fraudulent Content'), ('THEFT', 'Intellectual Property Theft'), ('HARASSMENT', 'Harassment or Bullying'), ('HATE_SPEECH', 'Hate Speech'), ('MISINFORMATION', 'Misinformation'), ('OTHER', 'Other')], help_text='Only used when scope is REPORT_TYPE', max_length=20, null=True)),
                ('reason', models.TextField(help_text="Moderator's reason for this decision")),
                ('notify_reporters', models.BooleanField(default=True)),
                ('escalate_to_platform', models.BooleanField(default=False, help_text='Report to platform-wide moderation')),
                ('original_content', models.TextField(blank=True, null=True)),
                ('new_content', models.TextField(blank=True, null=True)),
                ('suspension_until', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(verbose_name='description')),
                ('score', models.IntegerField(default=0)),
                ('total_replies', models.PositiveIntegerField(default=0)),
                ('status', models.CharField(choices=[('PENDING', 'Pending Approval'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected'), ('FLAGGED', 'Flagged for Review'), ('CONTENT_REMOVED', 'Content Removed by Moderation'), ('AUTHOR_REMOVED', 'Author Hidden by Moderation'), ('AUTHOR_AND_CONTENT_REMOVED', 'Author and Content Removed'), ('THREAD_DELETED', 'Thread Deleted by Moderation'), ('REPLY_TO_DELETED', 'Reply to Deleted Comment')], db_index=True, default='APPROVED', max_length=26)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('moderated_at', models.DateTimeField(blank=True, null=True)),
                ('moderation_note', models.TextField(blank=True, null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('author_name', models.CharField(blank=True, help_text='Optional name for anonymous users', max_length=50, null=True)),
                ('author_email', models.EmailField(blank=True, help_text='Optional email for anonymous users', max_length=254, null=True)),
                ('is_edited', models.BooleanField(default=False)),
                ('edit_history', models.JSONField(blank=True, default=list, help_text='History of edits to this comment')),
                ('moderated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='moderated_comments', to=settings.AUTH_USER_MODEL)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='comment.comment')),
                ('to_comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='related_comments', to='comment.comment')),
                ('to_decision', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='decisions.decision')),
                ('to_membership', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='user.membership')),
                ('to_need', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='need.need')),
                ('to_project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='project.project')),
            ],
        ),
    ]
