# Generated by Django 5.1.4 on 2025-07-26 09:35

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('skills', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Connection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=10)),
                ('type', models.CharField(choices=[('child', 'Child'), ('parent', 'Parent'), ('linked', 'Linked')], max_length=10)),
                ('added_date', models.DateTimeField(auto_now_add=True)),
                ('moderated_date', models.DateTimeField(blank=True, null=True)),
                ('added_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='added_connections', to=settings.AUTH_USER_MODEL)),
                ('moderated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='moderated_connections', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('summary', models.TextField(blank=True, verbose_name='summary')),
                ('desc', models.TextField(blank=True, verbose_name='description')),
                ('visibility', models.CharField(choices=[('public', 'Public'), ('logged_in', 'Only Logged-In Users'), ('restricted', 'Restricted (Added Users Only)'), ('private', 'Private (Author Only)')], default='public', max_length=20)),
                ('collaboration_mode', models.CharField(default='volunteering', max_length=50)),
                ('status', models.CharField(blank=True, choices=[('to_do', 'To Do'), ('doing', 'Doing'), ('done', 'Done')], max_length=20, null=True)),
                ('area', models.CharField(blank=True, max_length=255, null=True)),
                ('tags', models.TextField(blank=True, help_text='Comma-separated tags', null=True)),
                ('published', models.BooleanField(default=False)),
                ('allow_anonymous_comments', models.BooleanField(default=True, help_text='Allow non-logged-in users to comment')),
                ('require_comment_approval', models.BooleanField(default=False, help_text='Require comments to be approved by moderators before being visible')),
                ('connected_to', models.ManyToManyField(through='project.Connection', to='project.project')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_projects', to=settings.AUTH_USER_MODEL)),
                ('skills', models.ManyToManyField(blank=True, to='skills.skill')),
            ],
        ),
        migrations.CreateModel(
            name='Localization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
                ('description', models.TextField(blank=True, null=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='localizations', to='project.project')),
            ],
        ),
        migrations.AddField(
            model_name='connection',
            name='from_project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='outgoing_connections', to='project.project'),
        ),
        migrations.AddField(
            model_name='connection',
            name='to_project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='incoming_connections', to='project.project'),
        ),
        migrations.CreateModel(
            name='Membership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('ADMIN', 'Administrator'), ('MODERATOR', 'Moderator'), ('CONTRIBUTOR', 'Contributor'), ('SUPPORTER', 'Supporter'), ('VIEWER', 'Viewer'), ('CURATOR', 'Curator'), ('MENTOR', 'Mentor'), ('STAKEHOLDER', 'Stakeholder')], default='VIEWER', max_length=20)),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('is_moderator', models.BooleanField(default=False)),
                ('is_administrator', models.BooleanField(default=False)),
                ('is_owner', models.BooleanField(default=False)),
                ('is_contributor', models.BooleanField(default=False)),
                ('custom_permissions', models.JSONField(blank=True, default=dict, help_text='Custom permission overrides for this membership')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='project.project')),
            ],
            options={
                'permissions': [('can_moderate_comments', 'Can moderate comments'), ('can_approve_connections', 'Can approve project connections'), ('can_edit_project', 'Can edit project details'), ('can_add_members', 'Can add members to project'), ('can_remove_members', 'Can remove members from project'), ('can_view_analytics', 'Can view project analytics')],
                'unique_together': {('user', 'project')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='connection',
            unique_together={('from_project', 'to_project', 'type')},
        ),
    ]
